;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 18/10/2023 13:01:34
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF0E  	GOTO        28
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_main:
;LED_Tecla_2.c,36 :: 		void main() {
;LED_Tecla_2.c,44 :: 		unsigned char FlagAux = 0; // variável aux. do tipo char que irá permitir
0x001C	0x6A15      	CLRF        main_FlagAux_L0 
;LED_Tecla_2.c,53 :: 		ADCON1 |= 0XF;  // registrador presente no modelo PIC18F4550 e derivados
0x001E	0x0E0F      	MOVLW       15
0x0020	0x12C1      	IORWF       ADCON1, 1 
;LED_Tecla_2.c,59 :: 		trisb.rb0 = 1;  // configura pino RB0 como entrada
0x0022	0x8093      	BSF         TRISB, 0 
;LED_Tecla_2.c,60 :: 		PORTB.RB0=1; // coloca em nível 1 (pull-up)
0x0024	0x8081      	BSF         PORTB, 0 
;LED_Tecla_2.c,63 :: 		TRISD.RD0=0; //  configura o pino como saída (=0) (consome corrente)
0x0026	0x9095      	BCF         TRISD, 0 
;LED_Tecla_2.c,64 :: 		PORTD.RD0 = 0; // saída incialmente em 0 (LED OFF)
0x0028	0x9083      	BCF         PORTD, 0 
;LED_Tecla_2.c,70 :: 		while(1) // True
L_main0:
;LED_Tecla_2.c,73 :: 		if(PORTB.RB0 ==0 && FlagAux==0)   // AND lógico (expressão)
0x002A	0xB081      	BTFSC       PORTB, 0 
0x002C	0xD013      	BRA         L_main4
0x002E	0x5015      	MOVF        main_FlagAux_L0, 0 
0x0030	0x0A00      	XORLW       0
0x0032	0xE110      	BNZ         L_main4
L__main11:
;LED_Tecla_2.c,77 :: 		PORTD.RD0 =~LATD.RD0; // (TOOGGLE) Inverte o nível lógico do LED em LATD
0x0034	0xB08C      	BTFSC       LATD, 0 
0x0036	0xD002      	BRA         L__main13
0x0038	0x8083      	BSF         PORTD, 0 
0x003A	0xD001      	BRA         L__main14
L__main13:
0x003C	0x9083      	BCF         PORTD, 0 
L__main14:
;LED_Tecla_2.c,81 :: 		FlagAux=1;        //  A condição acima não será mais verdadeira - (aqui
0x003E	0x0E01      	MOVLW       1
0x0040	0x6E15      	MOVWF       main_FlagAux_L0 
;LED_Tecla_2.c,84 :: 		Delay_ms(40);     // trata efeito bouncing (repique mecânico do botão,
0x0042	0x0E68      	MOVLW       104
0x0044	0x6E0C      	MOVWF       R12, 0
0x0046	0x0EE4      	MOVLW       228
0x0048	0x6E0D      	MOVWF       R13, 0
L_main5:
0x004A	0x2E0D      	DECFSZ      R13, 1, 0
0x004C	0xD7FE      	BRA         L_main5
0x004E	0x2E0C      	DECFSZ      R12, 1, 0
0x0050	0xD7FC      	BRA         L_main5
0x0052	0x0000      	NOP
;LED_Tecla_2.c,88 :: 		} //fim do bloco IF, o qual em caso de falso (a tecla não for pressionada
L_main4:
;LED_Tecla_2.c,93 :: 		if(PORTB.RB0 ==1 && FlagAux==1)// Se a tecla não estiver press. E flag = 1
0x0054	0xA081      	BTFSS       PORTB, 0 
0x0056	0xD00D      	BRA         L_main8
0x0058	0x5015      	MOVF        main_FlagAux_L0, 0 
0x005A	0x0A01      	XORLW       1
0x005C	0xE10A      	BNZ         L_main8
L__main10:
;LED_Tecla_2.c,95 :: 		FlagAux=0;     // condição para voltar ao bloco IF anterior
0x005E	0x6A15      	CLRF        main_FlagAux_L0 
;LED_Tecla_2.c,96 :: 		Delay_ms(40);  // trata efeito bouncing
0x0060	0x0E68      	MOVLW       104
0x0062	0x6E0C      	MOVWF       R12, 0
0x0064	0x0EE4      	MOVLW       228
0x0066	0x6E0D      	MOVWF       R13, 0
L_main9:
0x0068	0x2E0D      	DECFSZ      R13, 1, 0
0x006A	0xD7FE      	BRA         L_main9
0x006C	0x2E0C      	DECFSZ      R12, 1, 0
0x006E	0xD7FC      	BRA         L_main9
0x0070	0x0000      	NOP
;LED_Tecla_2.c,97 :: 		}
L_main8:
;LED_Tecla_2.c,99 :: 		} //while
0x0072	0xD7DB      	BRA         L_main0
;LED_Tecla_2.c,101 :: 		} // main
L_end_main:
0x0074	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [90]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    main_FlagAux_L0
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F8C       [1]    LATD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
