;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 18/10/2023 18:57:38
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF2F  	GOTO        94
0x0004	0x0000      	NOP
0x0006	0x0000      	NOP
0x0008	0xF000EF00  	GOTO        0
0x000C	0x0000      	NOP
0x000E	0x0000      	NOP
0x0010	0x0000      	NOP
0x0012	0x0000      	NOP
0x0014	0x0000      	NOP
0x0016	0x0000      	NOP
0x0018	0xD7F3      	BRA         0
_Incremento:
;LED_Tecla_3_Incremento.c,45 :: 		void Incremento(unsigned char Contador)   // Bloco de incremento
;LED_Tecla_3_Incremento.c,47 :: 		switch (Contador)
0x001C	0xD00D      	BRA         L_Incremento0
;LED_Tecla_3_Incremento.c,57 :: 		case 0:{ latd = 0b00111111; break;}   //  0 no display de 7seg.
L_Incremento2:
0x001E	0x0E3F      	MOVLW       63
0x0020	0x6E8C      	MOVWF       LATD 
0x0022	0xD014      	BRA         L_Incremento1
;LED_Tecla_3_Incremento.c,58 :: 		case 1:{ latd = 0b00000110; break;}   //  1 no display de 7seg.
L_Incremento3:
0x0024	0x0E06      	MOVLW       6
0x0026	0x6E8C      	MOVWF       LATD 
0x0028	0xD011      	BRA         L_Incremento1
;LED_Tecla_3_Incremento.c,59 :: 		case 2:{ latd = 0b01011011; break;}   // 2 no display de 7seg.
L_Incremento4:
0x002A	0x0E5B      	MOVLW       91
0x002C	0x6E8C      	MOVWF       LATD 
0x002E	0xD00E      	BRA         L_Incremento1
;LED_Tecla_3_Incremento.c,60 :: 		default:{ PORTD =0; ucContador = -1; break;} // zera todo o PORTD e
L_Incremento5:
0x0030	0x6A83      	CLRF        PORTD 
0x0032	0x0EFF      	MOVLW       255
0x0034	0x6E15      	MOVWF       _ucContador 
0x0036	0xD00A      	BRA         L_Incremento1
;LED_Tecla_3_Incremento.c,62 :: 		}
L_Incremento0:
0x0038	0x5017      	MOVF        FARG_Incremento_Contador, 0 
0x003A	0x0A00      	XORLW       0
0x003C	0xE0F0      	BZ          L_Incremento2
0x003E	0x5017      	MOVF        FARG_Incremento_Contador, 0 
0x0040	0x0A01      	XORLW       1
0x0042	0xE0F0      	BZ          L_Incremento3
0x0044	0x5017      	MOVF        FARG_Incremento_Contador, 0 
0x0046	0x0A02      	XORLW       2
0x0048	0xE0F0      	BZ          L_Incremento4
0x004A	0xD7F2      	BRA         L_Incremento5
L_Incremento1:
;LED_Tecla_3_Incremento.c,64 :: 		}
L_end_Incremento:
0x004C	0x0012      	RETURN      0
; end of _Incremento
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x004E	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x0050	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0054	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0056	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0058	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x005A	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x005C	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x005E	0x0EFF      	MOVLW       255
0x0060	0x6E15      	MOVWF       _ucContador 
;LED_Tecla_3_Incremento.c,70 :: 		void main() {
;LED_Tecla_3_Incremento.c,76 :: 		unsigned char FlagAux = 0; // variável aux. do tipo char que irá permitir
0x0062	0x6A16      	CLRF        main_FlagAux_L0 
;LED_Tecla_3_Incremento.c,84 :: 		ADCON1 |= 0XF;   // configuração dos pinos como digital
0x0064	0x0E0F      	MOVLW       15
0x0066	0x12C1      	IORWF       ADCON1, 1 
;LED_Tecla_3_Incremento.c,88 :: 		TRISA =0;
0x0068	0x6A92      	CLRF        TRISA 
;LED_Tecla_3_Incremento.c,89 :: 		PORTA =0b00000111;
0x006A	0x0E07      	MOVLW       7
0x006C	0x6E80      	MOVWF       PORTA 
;LED_Tecla_3_Incremento.c,91 :: 		TRISB.RB0 = 1;  // configura pino RB0 como entrada
0x006E	0x8093      	BSF         TRISB, 0 
;LED_Tecla_3_Incremento.c,92 :: 		PORTB.RB0=1; //seria opcional pois internamente, ao colcoar TRISX.RX0 =1,...
0x0070	0x8081      	BSF         PORTB, 0 
;LED_Tecla_3_Incremento.c,100 :: 		TRISD=0;
0x0072	0x6A95      	CLRF        TRISD 
;LED_Tecla_3_Incremento.c,101 :: 		PORTD = 0;
0x0074	0x6A83      	CLRF        PORTD 
;LED_Tecla_3_Incremento.c,108 :: 		while(1) // True
L_main6:
;LED_Tecla_3_Incremento.c,110 :: 		if(PORTB.RB0 ==0 && FlagAux==0)   // AND lógico (expressão)
0x0076	0xB081      	BTFSC       PORTB, 0 
0x0078	0xD012      	BRA         L_main10
0x007A	0x5016      	MOVF        main_FlagAux_L0, 0 
0x007C	0x0A00      	XORLW       0
0x007E	0xE10F      	BNZ         L_main10
L__main17:
;LED_Tecla_3_Incremento.c,114 :: 		Incremento(++ucContador);  // recebe o Incremento do contador p/ o display de 7 segmentos
0x0080	0x2A15      	INCF        _ucContador, 1 
0x0082	0xF017C015  	MOVFF       _ucContador, FARG_Incremento_Contador
0x0086	0xDFCA      	RCALL       _Incremento
;LED_Tecla_3_Incremento.c,118 :: 		FlagAux=1;        //  A condição acima não será mais verdadeira
0x0088	0x0E01      	MOVLW       1
0x008A	0x6E16      	MOVWF       main_FlagAux_L0 
;LED_Tecla_3_Incremento.c,119 :: 		Delay_ms(40);     // tratar efeito bounce
0x008C	0x0E68      	MOVLW       104
0x008E	0x6E0C      	MOVWF       R12, 0
0x0090	0x0EE4      	MOVLW       228
0x0092	0x6E0D      	MOVWF       R13, 0
L_main11:
0x0094	0x2E0D      	DECFSZ      R13, 1, 0
0x0096	0xD7FE      	BRA         L_main11
0x0098	0x2E0C      	DECFSZ      R12, 1, 0
0x009A	0xD7FC      	BRA         L_main11
0x009C	0x0000      	NOP
;LED_Tecla_3_Incremento.c,121 :: 		}
L_main10:
;LED_Tecla_3_Incremento.c,124 :: 		if(PORTB.RB0 ==1 && FlagAux==1)// Se a tecla não estiver press. e flag = 1
0x009E	0xA081      	BTFSS       PORTB, 0 
0x00A0	0xD00D      	BRA         L_main14
0x00A2	0x5016      	MOVF        main_FlagAux_L0, 0 
0x00A4	0x0A01      	XORLW       1
0x00A6	0xE10A      	BNZ         L_main14
L__main16:
;LED_Tecla_3_Incremento.c,126 :: 		FlagAux=0;     // condição para voltar ao bloco IF anterior
0x00A8	0x6A16      	CLRF        main_FlagAux_L0 
;LED_Tecla_3_Incremento.c,127 :: 		Delay_ms(40);    // tratar efeito bounce
0x00AA	0x0E68      	MOVLW       104
0x00AC	0x6E0C      	MOVWF       R12, 0
0x00AE	0x0EE4      	MOVLW       228
0x00B0	0x6E0D      	MOVWF       R13, 0
L_main15:
0x00B2	0x2E0D      	DECFSZ      R13, 1, 0
0x00B4	0xD7FE      	BRA         L_main15
0x00B6	0x2E0C      	DECFSZ      R12, 1, 0
0x00B8	0xD7FC      	BRA         L_main15
0x00BA	0x0000      	NOP
;LED_Tecla_3_Incremento.c,128 :: 		}
L_main14:
;LED_Tecla_3_Incremento.c,130 :: 		} //while
0x00BC	0xD7DC      	BRA         L_main6
;LED_Tecla_3_Incremento.c,132 :: 		} // main
L_end_main:
0x00BE	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x001C      [50]    _Incremento
0x004E      [16]    ___CC2DW
0x005E      [98]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0015       [1]    _ucContador
0x0016       [1]    main_FlagAux_L0
0x0017       [1]    FARG_Incremento_Contador
0x0F80       [1]    PORTA
0x0F81       [1]    PORTB
0x0F83       [1]    PORTD
0x0F8C       [1]    LATD
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
